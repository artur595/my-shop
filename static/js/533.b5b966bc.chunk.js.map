{"version":3,"file":"static/js/533.b5b966bc.chunk.js","mappings":"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","sources":["pages/Cart.js"],"sourcesContent":["import React, {\n  Fragment,\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport Box from '@mui/material/Box';\nimport {\n  Card, Table, TableBody, TableCell, TableHead, TableRow, Dialog, DialogActions, DialogContent, DialogContentText,\n  DialogTitle, Button,\n} from '@mui/material';\n\nimport { Clear, Remove, Add } from '@mui/icons-material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport { changeQuantity, deleteCartRequest, getCartsRequest } from '../store/actions/products';\n\nfunction Cart() {\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(null);\n\n  const { cart, cartLoading } = useSelector((state) => state.products);\n\n  useEffect(() => {\n    dispatch(getCartsRequest());\n  }, []);\n\n  const onConfirm = useCallback(() => {\n    dispatch(deleteCartRequest(open));\n    setOpen(null);\n  }, [open]);\n\n  const handleChangeQuantity = (cartId, productId, newQuantity) => {\n    dispatch(changeQuantity({ cartId, productId, newQuantity }));\n  };\n\n  const totalPrice = useMemo(() => (\n    cart?.reduce((sum, c) => sum + (c.products.reduce((productSum, p) => productSum + p.price * p.quantity, 0)), 0)\n  ), [cart]);\n\n  return (\n    <Box>\n      <Typography variant=\"h5\" sx={{ fontWeight: 'bold' }}>\n        Cart\n      </Typography>\n\n      {cartLoading\n        ? (\n          <div style={{\n            width: '100%',\n            height: 'calc(100vh - 158px)',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n          >\n            <CircularProgress size={60} />\n          </div>\n        )\n\n        : (\n          <Box sx={{ mt: '20px' }}>\n            <Card sx={{ width: '100%' }}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Item</TableCell>\n                    <TableCell>Price</TableCell>\n                    <TableCell>Quantity</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell />\n                  </TableRow>\n                </TableHead>\n\n                <TableBody>\n                  {cart.map((c) => (\n                    <Fragment key={c.id}>\n                      <TableRow style={{ backgroundColor: '#f5f5f5', fontWeight: 'bold' }}>\n                        <TableCell colSpan={5} style={{ fontSize: '16px' }}>\n                          <div style={{\n                            display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%',\n                          }}\n                          >\n                            <span>\n                              Cart #\n                              {c.id}\n                            </span>\n\n                            <IconButton onClick={() => setOpen(c.id)} color=\"error\">\n                              <Clear />\n                            </IconButton>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n\n                      {c.products.map((p) => (\n                        <TableRow key={p.id}>\n                          <TableCell>{p.title}</TableCell>\n\n                          <TableCell>\n                            $\n                            {p.price.toFixed(2)}\n                          </TableCell>\n\n                          <TableCell>\n                            <div style={{\n                              display: 'flex', alignItems: 'center', minWidth: '100px',\n                            }}\n                            >\n                              <IconButton\n                                onClick={() => handleChangeQuantity(c.id, p.productId, p.quantity - 1)}\n                                size=\"small\"\n                              >\n                                <Remove />\n                              </IconButton>\n\n                              <span style={{ margin: '0 8px', fontWeight: 'bold' }}>{p.quantity}</span>\n\n                              <IconButton\n                                onClick={() => handleChangeQuantity(c.id, p.productId, p.quantity + 1)}\n                                size=\"small\"\n                              >\n                                <Add />\n                              </IconButton>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            $\n                            {(p.price * p.quantity).toFixed(2)}\n                          </TableCell>\n\n                          <TableCell />\n                        </TableRow>\n                      ))}\n                    </Fragment>\n\n                  ))}\n\n                  <TableRow>\n                    <TableCell\n                      colSpan={5}\n                      align=\"right\"\n                      sx={{ fontWeight: 'bold', fontSize: '20px', paddingRight: '70px' }}\n                    >\n                      {`Total: ${totalPrice.toFixed(2)}`}\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </Card>\n          </Box>\n        )}\n\n      <Dialog open={!!open} onClose={() => setOpen(null)}>\n        <DialogTitle>Confirm Deletion</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete this item? This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(null)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={onConfirm} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}\n\nexport default Cart;\n"],"names":["dispatch","useDispatch","open","setOpen","useState","cart","cartLoading","useSelector","state","products","useEffect","getCartsRequest","onConfirm","useCallback","deleteCartRequest","handleChangeQuantity","cartId","productId","newQuantity","changeQuantity","totalPrice","useMemo","reduce","sum","c","productSum","p","price","quantity","_jsxs","Box","children","_jsx","Typography","variant","sx","fontWeight","style","width","height","display","justifyContent","alignItems","CircularProgress","size","mt","Card","Table","TableHead","TableRow","TableCell","TableBody","map","Fragment","backgroundColor","colSpan","fontSize","id","IconButton","onClick","color","Clear","title","toFixed","minWidth","Remove","margin","Add","align","paddingRight","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button"],"sourceRoot":""}